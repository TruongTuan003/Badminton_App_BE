const Schedule = require("../models/Schedule");
const ScheduleDetail = require("../models/ScheduleDetail");
const Training = require("../models/Training");
const User = require("../models/User");

// üìç L·∫•y danh s√°ch l·ªãch c·ªßa user
exports.getUserSchedules = async (req, res) => {
  try {
    const userId = req.user.sub;
    const schedules = await Schedule.find({ userId }).sort({ date: -1 });
    res.json(schedules);
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch l·ªãch", error: err.message });
  }
};
// üìç L·∫•y l·ªãch theo ng√†y (theo user)
exports.getScheduleByDate = async (req, res) => {
  try {
    const { userId, date } = req.params;

    const schedule = await Schedule.findOne({ userId, date });

    if (!schedule) {
      return res.status(404).json({ message: `Kh√¥ng c√≥ l·ªãch n√†o cho ng√†y ${date}` });
    }

    res.json(schedule);
  } catch (err) {
    console.error("getScheduleByDate error:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi l·∫•y l·ªãch theo ng√†y" });
  }
};


// üìç T·∫°o l·ªãch m·ªõi (ch·ªâ l∆∞u ng√†y)
exports.createSchedule = async (req, res) => {
  try {
    const userId = req.user.sub;
    const { date, note } = req.body;

    if (!date) {
      return res.status(400).json({ message: "Thi·∫øu ng√†y l·ªãch" });
    }

    // Ki·ªÉm tra user t·ªìn t·∫°i
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra tr√πng ng√†y
    const exist = await Schedule.findOne({ userId, date });
    if (exist) {
      return res.status(400).json({ message: "Ng√†y n√†y ƒë√£ c√≥ l·ªãch" });
    }

    const schedule = await Schedule.create({ userId, date, note });
    res.status(201).json({ message: "T·∫°o l·ªãch th√†nh c√¥ng", schedule });
  } catch (err) {
    res.status(400).json({ message: "L·ªói khi t·∫°o l·ªãch", error: err.message });
  }
};

// üìç Th√™m b√†i t·∫≠p v√†o l·ªãch (ki·ªÉm tra t·ªìn t·∫°i)
exports.addWorkoutToSchedule = async (req, res) => {
  try {
    const { scheduleId, workoutId, time, note } = req.body;

    if (!scheduleId || !workoutId) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin l·ªãch ho·∫∑c b√†i t·∫≠p" });
    }

    // ‚úÖ Ki·ªÉm tra l·ªãch t·ªìn t·∫°i
    const schedule = await Schedule.findById(scheduleId);
    if (!schedule) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch" });
    }

    // ‚úÖ Ki·ªÉm tra b√†i t·∫≠p t·ªìn t·∫°i
    const workout = await Training.findById(workoutId);
    if (!workout) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p" });
    }

    // ‚úÖ Ki·ªÉm tra tr√πng b√†i t·∫≠p c√πng gi·ªù trong l·ªãch
    const duplicate = await ScheduleDetail.findOne({ scheduleId, workoutId, time });
    if (duplicate) {
      return res.status(400).json({ message: "B√†i t·∫≠p n√†y ƒë√£ c√≥ trong l·ªãch ·ªü c√πng gi·ªù" });
    }

    const detail = await ScheduleDetail.create({
      scheduleId,
      workoutId,
      time,
      note,
    });

    res.status(201).json({ message: "ƒê√£ th√™m b√†i t·∫≠p v√†o l·ªãch", detail });
  } catch (err) {
    res.status(400).json({ message: "L·ªói khi th√™m b√†i t·∫≠p v√†o l·ªãch", error: err.message });
  }
};

// üìç L·∫•y chi ti·∫øt l·ªãch (bao g·ªìm c√°c b√†i t·∫≠p)
exports.getScheduleDetails = async (req, res) => {
  try {
    const scheduleId = req.params.id;

    const schedule = await Schedule.findById(scheduleId);
    if (!schedule) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch" });
    }

    const details = await ScheduleDetail.find({ scheduleId })
      .populate("workoutId", "title level duration_minutes image_url goal");

    res.json({ schedule, details });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi l·∫•y chi ti·∫øt l·ªãch", error: err.message });
  }
};

// üìç C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i t·∫≠p trong l·ªãch
exports.updateScheduleDetailStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    const validStatuses = ["pending", "done", "skipped"];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá" });
    }

    const detail = await ScheduleDetail.findById(id);
    if (!detail) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y chi ti·∫øt l·ªãch" });
    }

    detail.status = status;
    await detail.save();

    res.json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng", detail });
  } catch (err) {
    res.status(400).json({ message: "L·ªói khi c·∫≠p nh·∫≠t", error: err.message });
  }
};

// üìç X√≥a l·ªãch (v√† to√†n b·ªô chi ti·∫øt)
exports.deleteSchedule = async (req, res) => {
  try {
    const { id } = req.params;

    const schedule = await Schedule.findById(id);
    if (!schedule) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch c·∫ßn x√≥a" });
    }

    await ScheduleDetail.deleteMany({ scheduleId: id });
    await Schedule.findByIdAndDelete(id);

    res.json({ message: "ƒê√£ x√≥a l·ªãch v√† chi ti·∫øt li√™n quan" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói khi x√≥a l·ªãch", error: err.message });
  }
};
// üìç X√≥a 1 b√†i t·∫≠p kh·ªèi l·ªãch tr√¨nh
exports.removeTrainingFromSchedule = async (req, res) => {
  try {
    const { id, trainingId } = req.params; // id = scheduleId, trainingId = workoutId

    // Ki·ªÉm tra xem l·ªãch c√≥ t·ªìn t·∫°i kh√¥ng
    const schedule = await Schedule.findById(id);
    if (!schedule) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch tr√¨nh" });
    }

    // T√¨m v√† x√≥a b√†i t·∫≠p trong ScheduleDetail
    const deleted = await ScheduleDetail.findOneAndDelete({
      scheduleId: id,
      workoutId: trainingId
    });

    if (!deleted) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i t·∫≠p trong l·ªãch" });
    }

    res.json({ message: "ƒê√£ x√≥a b√†i t·∫≠p kh·ªèi l·ªãch tr√¨nh" });
  } catch (err) {
    console.error("removeTrainingFromSchedule error:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi x√≥a b√†i t·∫≠p" });
  }
};

